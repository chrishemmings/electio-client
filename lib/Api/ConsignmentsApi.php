<?php
/**
 * ConsignmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  ChrisHemmings\ElectioClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Electio API
 *
 * A PHP client for the Electio delivery management system
 *
 * OpenAPI spec version: 0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChrisHemmings\ElectioClient\Api;

use \ChrisHemmings\ElectioClient\Configuration;
use \ChrisHemmings\ElectioClient\ApiClient;
use \ChrisHemmings\ElectioClient\ApiException;
use \ChrisHemmings\ElectioClient\ObjectSerializer;

/**
 * ConsignmentsApi Class Doc Comment
 *
 * @category Class
 * @package  ChrisHemmings\ElectioClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConsignmentsApi
{

    /**
     * API Client
     *
     * @var \ChrisHemmings\ElectioClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ChrisHemmings\ElectioClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ChrisHemmings\ElectioClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.electioapp.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ChrisHemmings\ElectioClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ChrisHemmings\ElectioClient\ApiClient $apiClient set the API client
     *
     * @return ConsignmentsApi
     */
    public function setApiClient(\ChrisHemmings\ElectioClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addPackageToConsignment
     *
     *
     *
     * @param string $consignmentReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function addPackageToConsignment($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->addPackageToConsignmentWithHttpInfo($consignmentReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation addPackageToConsignmentWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function addPackageToConsignmentWithHttpInfo($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling addPackageToConsignment');
        }
        // parse inputs
        $resourcePath = "/Consignments/{consignmentReference}/addpackage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/{consignmentReference}/addpackage'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation addPackagesToAConsignment
     *
     *
     *
     * @param string $consignmentReference The consignment reference to add packages to (required)
     * @param int $numberOfPackages The number of packages to add (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function addPackagesToAConsignment($consignmentReference, $numberOfPackages, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->addPackagesToAConsignmentWithHttpInfo($consignmentReference, $numberOfPackages, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation addPackagesToAConsignmentWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference The consignment reference to add packages to (required)
     * @param int $numberOfPackages The number of packages to add (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function addPackagesToAConsignmentWithHttpInfo($consignmentReference, $numberOfPackages, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling addPackagesToAConsignment');
        }
        // verify the required parameter 'numberOfPackages' is set
        if ($numberOfPackages === null) {
            throw new \InvalidArgumentException('Missing the required parameter $numberOfPackages when calling addPackagesToAConsignment');
        }
        // parse inputs
        $resourcePath = "/Consignments/{consignmentReference}/addpackages/{numberOfPackages}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // path params
        if ($numberOfPackages !== null) {
            $resourcePath = str_replace(
                "{" . "numberOfPackages" . "}",
                $this->apiClient->getSerializer()->toPathValue($numberOfPackages),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/{consignmentReference}/addpackages/{numberOfPackages}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation cancelAConsignment
     *
     *
     *
     * @param string $consignmentReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function cancelAConsignment($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->cancelAConsignmentWithHttpInfo($consignmentReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation cancelAConsignmentWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function cancelAConsignmentWithHttpInfo($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling cancelAConsignment');
        }
        // parse inputs
        $resourcePath = "/Consignments/{consignmentReference}/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/{consignmentReference}/cancel'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation createANewConsignment
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function createANewConsignment($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->createANewConsignmentWithHttpInfo($subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation createANewConsignmentWithHttpInfo
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function createANewConsignmentWithHttpInfo($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/Consignments/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/xml'));

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deAllocateTheSpecifiedConsignment
     *
     *
     *
     * @param string $consignmentReference The reference of the consignment to de-allocate (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function deAllocateTheSpecifiedConsignment($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->deAllocateTheSpecifiedConsignmentWithHttpInfo($consignmentReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation deAllocateTheSpecifiedConsignmentWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference The reference of the consignment to de-allocate (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function deAllocateTheSpecifiedConsignmentWithHttpInfo($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling deAllocateTheSpecifiedConsignment');
        }
        // parse inputs
        $resourcePath = "/Consignments/{consignmentReference}/deallocate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/{consignmentReference}/deallocate'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getACountOfConsignments
     *
     *
     *
     * @param string $state The state of the consignments to count, e.g. Unallocated, Allocated, Manifested etc. (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getACountOfConsignments($state = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getACountOfConsignmentsWithHttpInfo($state, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getACountOfConsignmentsWithHttpInfo
     *
     *
     *
     * @param string $state The state of the consignments to count, e.g. Unallocated, Allocated, Manifested etc. (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getACountOfConsignmentsWithHttpInfo($state = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/Consignments/count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/count'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getASummaryByCarrierInTheDatePeriod
     *
     *
     *
     * @param string $startFrom The date to start the summary from (required)
     * @param string $endAt The date to end the summary at (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getASummaryByCarrierInTheDatePeriod($startFrom, $endAt, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getASummaryByCarrierInTheDatePeriodWithHttpInfo($startFrom, $endAt, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getASummaryByCarrierInTheDatePeriodWithHttpInfo
     *
     *
     *
     * @param string $startFrom The date to start the summary from (required)
     * @param string $endAt The date to end the summary at (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getASummaryByCarrierInTheDatePeriodWithHttpInfo($startFrom, $endAt, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'startFrom' is set
        if ($startFrom === null) {
            throw new \InvalidArgumentException('Missing the required parameter $startFrom when calling getASummaryByCarrierInTheDatePeriod');
        }
        // verify the required parameter 'endAt' is set
        if ($endAt === null) {
            throw new \InvalidArgumentException('Missing the required parameter $endAt when calling getASummaryByCarrierInTheDatePeriod');
        }
        // parse inputs
        $resourcePath = "/Consignments/summary/courier";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($startFrom !== null) {
            $queryParams['startFrom'] = $this->apiClient->getSerializer()->toQueryValue($startFrom);
        }
        // query params
        if ($endAt !== null) {
            $queryParams['endAt'] = $this->apiClient->getSerializer()->toQueryValue($endAt);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/summary/courier'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getASummaryOfConsignmentsInDatePeriod
     *
     *
     *
     * @param string $startFrom The date from which to include consignments in the summary (required)
     * @param string $endAt The date at which to stop consignments from being included in the summary (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getASummaryOfConsignmentsInDatePeriod($startFrom, $endAt, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getASummaryOfConsignmentsInDatePeriodWithHttpInfo($startFrom, $endAt, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getASummaryOfConsignmentsInDatePeriodWithHttpInfo
     *
     *
     *
     * @param string $startFrom The date from which to include consignments in the summary (required)
     * @param string $endAt The date at which to stop consignments from being included in the summary (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getASummaryOfConsignmentsInDatePeriodWithHttpInfo($startFrom, $endAt, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'startFrom' is set
        if ($startFrom === null) {
            throw new \InvalidArgumentException('Missing the required parameter $startFrom when calling getASummaryOfConsignmentsInDatePeriod');
        }
        // verify the required parameter 'endAt' is set
        if ($endAt === null) {
            throw new \InvalidArgumentException('Missing the required parameter $endAt when calling getASummaryOfConsignmentsInDatePeriod');
        }
        // parse inputs
        $resourcePath = "/Consignments/summary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($startFrom !== null) {
            $queryParams['startFrom'] = $this->apiClient->getSerializer()->toQueryValue($startFrom);
        }
        // query params
        if ($endAt !== null) {
            $queryParams['endAt'] = $this->apiClient->getSerializer()->toQueryValue($endAt);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/summary'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getASummaryOfLatePackagesInTheDatePeriod
     *
     *
     *
     * @param string $startFrom The start date of the period to get the summary for (required)
     * @param string $endAt The end date of the period to get the summary for (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getASummaryOfLatePackagesInTheDatePeriod($startFrom, $endAt, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getASummaryOfLatePackagesInTheDatePeriodWithHttpInfo($startFrom, $endAt, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getASummaryOfLatePackagesInTheDatePeriodWithHttpInfo
     *
     *
     *
     * @param string $startFrom The start date of the period to get the summary for (required)
     * @param string $endAt The end date of the period to get the summary for (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getASummaryOfLatePackagesInTheDatePeriodWithHttpInfo($startFrom, $endAt, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'startFrom' is set
        if ($startFrom === null) {
            throw new \InvalidArgumentException('Missing the required parameter $startFrom when calling getASummaryOfLatePackagesInTheDatePeriod');
        }
        // verify the required parameter 'endAt' is set
        if ($endAt === null) {
            throw new \InvalidArgumentException('Missing the required parameter $endAt when calling getASummaryOfLatePackagesInTheDatePeriod');
        }
        // parse inputs
        $resourcePath = "/Consignments/summary/latepackages";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($startFrom !== null) {
            $queryParams['startFrom'] = $this->apiClient->getSerializer()->toQueryValue($startFrom);
        }
        // query params
        if ($endAt !== null) {
            $queryParams['endAt'] = $this->apiClient->getSerializer()->toQueryValue($endAt);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/summary/latepackages'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomerManifestByReference
     *
     *
     *
     * @param string $manifestReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getCustomerManifestByReference($manifestReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getCustomerManifestByReferenceWithHttpInfo($manifestReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getCustomerManifestByReferenceWithHttpInfo
     *
     *
     *
     * @param string $manifestReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getCustomerManifestByReferenceWithHttpInfo($manifestReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'manifestReference' is set
        if ($manifestReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $manifestReference when calling getCustomerManifestByReference');
        }
        // parse inputs
        $resourcePath = "/Consignments/customer/manifest/{manifestReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($manifestReference !== null) {
            $resourcePath = str_replace(
                "{" . "manifestReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($manifestReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/customer/manifest/{manifestReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getCustomsDocuments
     *
     *
     *
     * @param string $consignmentReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getCustomsDocuments($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getCustomsDocumentsWithHttpInfo($consignmentReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getCustomsDocumentsWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getCustomsDocumentsWithHttpInfo($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling getCustomsDocuments');
        }
        // parse inputs
        $resourcePath = "/Consignments/docs/{consignmentReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/docs/{consignmentReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getManifests
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getManifests($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getManifestsWithHttpInfo($subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getManifestsWithHttpInfo
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getManifestsWithHttpInfo($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/Consignments/customer/manifests";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/customer/manifests'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getMultipleConsignmentDetails
     *
     *
     *
     * @param int $take The number of consignments to retrieve (required)
     * @param int $skip The number of consignments to skip (required)
     * @param string $createdDateFrom The earliest date of creation of the consignment (optional)
     * @param string $createdDateTo The latest date of creation of the consignment (optional)
     * @param string $scheduledDeliveryDateFrom The earliest scheduled delivery date (optional)
     * @param string $scheduledDeliveryDateTo The latest scheduled delivery date (optional)
     * @param string $shippedDateFrom The earliest shipped date (note this only applies to shipped consignments) (optional)
     * @param string $shippedDateTo The latest shipped date (note this only applies to shipped consignments) (optional)
     * @param string $reference The reference of the consignment. This will return partial matches. (optional)
     * @param string $state The state of the consignment, e.g. Unallocated, Allocated, Manifested (optional)
     * @param int $weightInGramsFrom The lowest weight in grams (optional)
     * @param int $weightInGramsTo The highest weight in grams (optional)
     * @param string $carrierService The reference of the carrier service that the consignment has been allocated to (note: only applies to allocated or shipped consignments) (optional)
     * @param string $source The source of the consignment (e.g. Manual, API, CSV) (optional)
     * @param string $postcode The postcode of the source or destination address. This will return partial matches (optional)
     * @param float $valueFrom The lowest value (currency) of the consignment (optional)
     * @param float $valueTo The highest value (currency) of the consignment (optional)
     * @param string $searchTerm An optional search term (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getMultipleConsignmentDetails($take, $skip, $createdDateFrom = null, $createdDateTo = null, $scheduledDeliveryDateFrom = null, $scheduledDeliveryDateTo = null, $shippedDateFrom = null, $shippedDateTo = null, $reference = null, $state = null, $weightInGramsFrom = null, $weightInGramsTo = null, $carrierService = null, $source = null, $postcode = null, $valueFrom = null, $valueTo = null, $searchTerm = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getMultipleConsignmentDetailsWithHttpInfo($take, $skip, $createdDateFrom, $createdDateTo, $scheduledDeliveryDateFrom, $scheduledDeliveryDateTo, $shippedDateFrom, $shippedDateTo, $reference, $state, $weightInGramsFrom, $weightInGramsTo, $carrierService, $source, $postcode, $valueFrom, $valueTo, $searchTerm, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getMultipleConsignmentDetailsWithHttpInfo
     *
     *
     *
     * @param int $take The number of consignments to retrieve (required)
     * @param int $skip The number of consignments to skip (required)
     * @param string $createdDateFrom The earliest date of creation of the consignment (optional)
     * @param string $createdDateTo The latest date of creation of the consignment (optional)
     * @param string $scheduledDeliveryDateFrom The earliest scheduled delivery date (optional)
     * @param string $scheduledDeliveryDateTo The latest scheduled delivery date (optional)
     * @param string $shippedDateFrom The earliest shipped date (note this only applies to shipped consignments) (optional)
     * @param string $shippedDateTo The latest shipped date (note this only applies to shipped consignments) (optional)
     * @param string $reference The reference of the consignment. This will return partial matches. (optional)
     * @param string $state The state of the consignment, e.g. Unallocated, Allocated, Manifested (optional)
     * @param int $weightInGramsFrom The lowest weight in grams (optional)
     * @param int $weightInGramsTo The highest weight in grams (optional)
     * @param string $carrierService The reference of the carrier service that the consignment has been allocated to (note: only applies to allocated or shipped consignments) (optional)
     * @param string $source The source of the consignment (e.g. Manual, API, CSV) (optional)
     * @param string $postcode The postcode of the source or destination address. This will return partial matches (optional)
     * @param float $valueFrom The lowest value (currency) of the consignment (optional)
     * @param float $valueTo The highest value (currency) of the consignment (optional)
     * @param string $searchTerm An optional search term (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getMultipleConsignmentDetailsWithHttpInfo($take, $skip, $createdDateFrom = null, $createdDateTo = null, $scheduledDeliveryDateFrom = null, $scheduledDeliveryDateTo = null, $shippedDateFrom = null, $shippedDateTo = null, $reference = null, $state = null, $weightInGramsFrom = null, $weightInGramsTo = null, $carrierService = null, $source = null, $postcode = null, $valueFrom = null, $valueTo = null, $searchTerm = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'take' is set
        if ($take === null) {
            throw new \InvalidArgumentException('Missing the required parameter $take when calling getMultipleConsignmentDetails');
        }
        // verify the required parameter 'skip' is set
        if ($skip === null) {
            throw new \InvalidArgumentException('Missing the required parameter $skip when calling getMultipleConsignmentDetails');
        }
        // parse inputs
        $resourcePath = "/Consignments/{take}/{skip}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($createdDateFrom !== null) {
            $queryParams['createdDateFrom'] = $this->apiClient->getSerializer()->toQueryValue($createdDateFrom);
        }
        // query params
        if ($createdDateTo !== null) {
            $queryParams['createdDateTo'] = $this->apiClient->getSerializer()->toQueryValue($createdDateTo);
        }
        // query params
        if ($scheduledDeliveryDateFrom !== null) {
            $queryParams['scheduledDeliveryDateFrom'] = $this->apiClient->getSerializer()->toQueryValue($scheduledDeliveryDateFrom);
        }
        // query params
        if ($scheduledDeliveryDateTo !== null) {
            $queryParams['scheduledDeliveryDateTo'] = $this->apiClient->getSerializer()->toQueryValue($scheduledDeliveryDateTo);
        }
        // query params
        if ($shippedDateFrom !== null) {
            $queryParams['shippedDateFrom'] = $this->apiClient->getSerializer()->toQueryValue($shippedDateFrom);
        }
        // query params
        if ($shippedDateTo !== null) {
            $queryParams['shippedDateTo'] = $this->apiClient->getSerializer()->toQueryValue($shippedDateTo);
        }
        // query params
        if ($reference !== null) {
            $queryParams['reference'] = $this->apiClient->getSerializer()->toQueryValue($reference);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($weightInGramsFrom !== null) {
            $queryParams['weightInGramsFrom'] = $this->apiClient->getSerializer()->toQueryValue($weightInGramsFrom);
        }
        // query params
        if ($weightInGramsTo !== null) {
            $queryParams['weightInGramsTo'] = $this->apiClient->getSerializer()->toQueryValue($weightInGramsTo);
        }
        // query params
        if ($carrierService !== null) {
            $queryParams['carrierService'] = $this->apiClient->getSerializer()->toQueryValue($carrierService);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = $this->apiClient->getSerializer()->toQueryValue($source);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = $this->apiClient->getSerializer()->toQueryValue($postcode);
        }
        // query params
        if ($valueFrom !== null) {
            $queryParams['valueFrom'] = $this->apiClient->getSerializer()->toQueryValue($valueFrom);
        }
        // query params
        if ($valueTo !== null) {
            $queryParams['valueTo'] = $this->apiClient->getSerializer()->toQueryValue($valueTo);
        }
        // query params
        if ($searchTerm !== null) {
            $queryParams['searchTerm'] = $this->apiClient->getSerializer()->toQueryValue($searchTerm);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($take !== null) {
            $resourcePath = str_replace(
                "{" . "take" . "}",
                $this->apiClient->getSerializer()->toPathValue($take),
                $resourcePath
            );
        }
        // path params
        if ($skip !== null) {
            $resourcePath = str_replace(
                "{" . "skip" . "}",
                $this->apiClient->getSerializer()->toPathValue($skip),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/{take}/{skip}'
            );

            return array($response, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTheSpecifiedConsignmentDetails
     *
     *
     *
     * @param string $consignmentReference Consignment reference in the format EC-XXX-XXX-XXX (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheSpecifiedConsignmentDetails($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getTheSpecifiedConsignmentDetailsWithHttpInfo($consignmentReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getTheSpecifiedConsignmentDetailsWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference Consignment reference in the format EC-XXX-XXX-XXX (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheSpecifiedConsignmentDetailsWithHttpInfo($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling getTheSpecifiedConsignmentDetails');
        }
        // parse inputs
        $resourcePath = "/Consignments/{consignmentReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/{consignmentReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTheSpecifiedConsignmentDetailsByClientReference
     *
     *
     *
     * @param string $clientReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheSpecifiedConsignmentDetailsByClientReference($clientReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getTheSpecifiedConsignmentDetailsByClientReferenceWithHttpInfo($clientReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getTheSpecifiedConsignmentDetailsByClientReferenceWithHttpInfo
     *
     *
     *
     * @param string $clientReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheSpecifiedConsignmentDetailsByClientReferenceWithHttpInfo($clientReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'clientReference' is set
        if ($clientReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientReference when calling getTheSpecifiedConsignmentDetailsByClientReference');
        }
        // parse inputs
        $resourcePath = "/Consignments/clientReference/{clientReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($clientReference !== null) {
            $resourcePath = str_replace(
                "{" . "clientReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($clientReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/clientReference/{clientReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTheSpecifiedConsignmentDetailsWithMetadata
     *
     *
     *
     * @param string $consignmentReference The reference of the consignment to retrieve (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheSpecifiedConsignmentDetailsWithMetadata($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getTheSpecifiedConsignmentDetailsWithMetadataWithHttpInfo($consignmentReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getTheSpecifiedConsignmentDetailsWithMetadataWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference The reference of the consignment to retrieve (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheSpecifiedConsignmentDetailsWithMetadataWithHttpInfo($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling getTheSpecifiedConsignmentDetailsWithMetadata');
        }
        // parse inputs
        $resourcePath = "/Consignments/getconsignmentwithmetadata/{consignmentReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/getconsignmentwithmetadata/{consignmentReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTheStatusOfTheSpecifiedConsignment
     *
     *
     *
     * @param string $consignmentReference The consignment reference whose status you want to retrieve (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheStatusOfTheSpecifiedConsignment($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getTheStatusOfTheSpecifiedConsignmentWithHttpInfo($consignmentReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getTheStatusOfTheSpecifiedConsignmentWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference The consignment reference whose status you want to retrieve (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheStatusOfTheSpecifiedConsignmentWithHttpInfo($consignmentReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling getTheStatusOfTheSpecifiedConsignment');
        }
        // parse inputs
        $resourcePath = "/Consignments/{consignmentReference}/status";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/{consignmentReference}/status'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTheStatusOfTheSpecifiedConsignmentSByClientReference
     *
     *
     *
     * @param string $clientReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheStatusOfTheSpecifiedConsignmentSByClientReference($clientReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getTheStatusOfTheSpecifiedConsignmentSByClientReferenceWithHttpInfo($clientReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getTheStatusOfTheSpecifiedConsignmentSByClientReferenceWithHttpInfo
     *
     *
     *
     * @param string $clientReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getTheStatusOfTheSpecifiedConsignmentSByClientReferenceWithHttpInfo($clientReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'clientReference' is set
        if ($clientReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clientReference when calling getTheStatusOfTheSpecifiedConsignmentSByClientReference');
        }
        // parse inputs
        $resourcePath = "/Consignments/clientReference/{clientReference}/status";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($clientReference !== null) {
            $resourcePath = str_replace(
                "{" . "clientReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($clientReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/clientReference/{clientReference}/status'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation manifestConsignments
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function manifestConsignments($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->manifestConsignmentsWithHttpInfo($subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation manifestConsignmentsWithHttpInfo
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function manifestConsignmentsWithHttpInfo($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/Consignments/manifest";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/xml'));

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/manifest'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation removePackageFromConsignment
     *
     *
     *
     * @param string $consignmentReference  (required)
     * @param string $packageReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function removePackageFromConsignment($consignmentReference, $packageReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->removePackageFromConsignmentWithHttpInfo($consignmentReference, $packageReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation removePackageFromConsignmentWithHttpInfo
     *
     *
     *
     * @param string $consignmentReference  (required)
     * @param string $packageReference  (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function removePackageFromConsignmentWithHttpInfo($consignmentReference, $packageReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling removePackageFromConsignment');
        }
        // verify the required parameter 'packageReference' is set
        if ($packageReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $packageReference when calling removePackageFromConsignment');
        }
        // parse inputs
        $resourcePath = "/Consignments/{consignmentReference}/removepackage/{packageReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // path params
        if ($packageReference !== null) {
            $resourcePath = str_replace(
                "{" . "packageReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($packageReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/{consignmentReference}/removepackage/{packageReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateConsignmentDetails
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function updateConsignmentDetails($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->updateConsignmentDetailsWithHttpInfo($subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation updateConsignmentDetailsWithHttpInfo
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function updateConsignmentDetailsWithHttpInfo($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/Consignments/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/xml'));

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/update'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateConsignmentDetailsAlternativeRoute
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function updateConsignmentDetailsAlternativeRoute($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->updateConsignmentDetailsAlternativeRouteWithHttpInfo($subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation updateConsignmentDetailsAlternativeRouteWithHttpInfo
     *
     *
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function updateConsignmentDetailsAlternativeRouteWithHttpInfo($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/Consignments/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Consignments/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
