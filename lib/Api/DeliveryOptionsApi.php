<?php
/**
 * DeliveryOptionsApi
 * PHP version 5
 *
 * @category Class
 * @package  ChrisHemmings\ElectioClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Electio API
 *
 * A PHP client for the Electio delivery management system
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChrisHemmings\ElectioClient\Api;

use \ChrisHemmings\ElectioClient\Configuration;
use \ChrisHemmings\ElectioClient\ApiClient;
use \ChrisHemmings\ElectioClient\ApiException;
use \ChrisHemmings\ElectioClient\ObjectSerializer;

/**
 * DeliveryOptionsApi Class Doc Comment
 *
 * @category Class
 * @package  ChrisHemmings\ElectioClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryOptionsApi
{

    /**
     * API Client
     *
     * @var \ChrisHemmings\ElectioClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ChrisHemmings\ElectioClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ChrisHemmings\ElectioClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.electioapp.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ChrisHemmings\ElectioClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ChrisHemmings\ElectioClient\ApiClient $apiClient set the API client
     *
     * @return DeliveryOptionsApi
     */
    public function setApiClient(\ChrisHemmings\ElectioClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getDeliveryOptionDetails
     *
     * 
     *
     * @param string $reference The reference of the delivery option or pickup option to retrieve (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getDeliveryOptionDetails($reference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getDeliveryOptionDetailsWithHttpInfo($reference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getDeliveryOptionDetailsWithHttpInfo
     *
     * 
     *
     * @param string $reference The reference of the delivery option or pickup option to retrieve (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getDeliveryOptionDetailsWithHttpInfo($reference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reference when calling getDeliveryOptionDetails');
        }
        // parse inputs
        $resourcePath = "/deliveryoptions/details/{reference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                "{" . "reference" . "}",
                $this->apiClient->getSerializer()->toPathValue($reference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/details/{reference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getDeliveryOptions
     *
     * 
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getDeliveryOptions($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getDeliveryOptionsWithHttpInfo($subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getDeliveryOptionsWithHttpInfo
     *
     * 
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getDeliveryOptionsWithHttpInfo($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/deliveryoptions/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/xml'));

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getDeliveryOptionsForExistingConsignment
     *
     * 
     *
     * @param string $consignmentReference The reference of the consignment to retrieve delivery options for (required)
     * @param string $deliveryDate The date to retrieve delivery options for (optional)
     * @param bool $guaranteedOnly A flag to indicate that the response should include only guaranteed delivery options (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getDeliveryOptionsForExistingConsignment($consignmentReference, $deliveryDate = null, $guaranteedOnly = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getDeliveryOptionsForExistingConsignmentWithHttpInfo($consignmentReference, $deliveryDate, $guaranteedOnly, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getDeliveryOptionsForExistingConsignmentWithHttpInfo
     *
     * 
     *
     * @param string $consignmentReference The reference of the consignment to retrieve delivery options for (required)
     * @param string $deliveryDate The date to retrieve delivery options for (optional)
     * @param bool $guaranteedOnly A flag to indicate that the response should include only guaranteed delivery options (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getDeliveryOptionsForExistingConsignmentWithHttpInfo($consignmentReference, $deliveryDate = null, $guaranteedOnly = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling getDeliveryOptionsForExistingConsignment');
        }
        // parse inputs
        $resourcePath = "/deliveryoptions/consignment/{consignmentReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($deliveryDate !== null) {
            $queryParams['deliveryDate'] = $this->apiClient->getSerializer()->toQueryValue($deliveryDate);
        }
        // query params
        if ($guaranteedOnly !== null) {
            $queryParams['guaranteedOnly'] = $this->apiClient->getSerializer()->toQueryValue($guaranteedOnly);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/consignment/{consignmentReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getDeliveryOptionsSummary
     *
     * 
     *
     * @param string $startFrom The date to start the availability summary from. Defaults to today if not specified (optional)
     * @param string $endAt The last date for which you want to retrieve availability. If not specified, this defaults to the Customer&#39;s default setting if configured, otherwise a system default of today + 14 days. (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getDeliveryOptionsSummary($startFrom = null, $endAt = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getDeliveryOptionsSummaryWithHttpInfo($startFrom, $endAt, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getDeliveryOptionsSummaryWithHttpInfo
     *
     * 
     *
     * @param string $startFrom The date to start the availability summary from. Defaults to today if not specified (optional)
     * @param string $endAt The last date for which you want to retrieve availability. If not specified, this defaults to the Customer&#39;s default setting if configured, otherwise a system default of today + 14 days. (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getDeliveryOptionsSummaryWithHttpInfo($startFrom = null, $endAt = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/deliveryoptions/summary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/xml'));

        // query params
        if ($startFrom !== null) {
            $queryParams['startFrom'] = $this->apiClient->getSerializer()->toQueryValue($startFrom);
        }
        // query params
        if ($endAt !== null) {
            $queryParams['endAt'] = $this->apiClient->getSerializer()->toQueryValue($endAt);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/summary'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getExistingDeliveryOptions
     *
     * 
     *
     * @param string $reference The reference returned from the Get Delivery Options Summary operation (required)
     * @param string $deliveryDate The date to return a delivery option for (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getExistingDeliveryOptions($reference, $deliveryDate, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getExistingDeliveryOptionsWithHttpInfo($reference, $deliveryDate, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getExistingDeliveryOptionsWithHttpInfo
     *
     * 
     *
     * @param string $reference The reference returned from the Get Delivery Options Summary operation (required)
     * @param string $deliveryDate The date to return a delivery option for (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getExistingDeliveryOptionsWithHttpInfo($reference, $deliveryDate, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reference when calling getExistingDeliveryOptions');
        }
        // verify the required parameter 'deliveryDate' is set
        if ($deliveryDate === null) {
            throw new \InvalidArgumentException('Missing the required parameter $deliveryDate when calling getExistingDeliveryOptions');
        }
        // parse inputs
        $resourcePath = "/deliveryoptions/{reference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($deliveryDate !== null) {
            $queryParams['deliveryDate'] = $this->apiClient->getSerializer()->toQueryValue($deliveryDate);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                "{" . "reference" . "}",
                $this->apiClient->getSerializer()->toPathValue($reference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/{reference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getPickupOptions
     *
     * 
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getPickupOptions($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getPickupOptionsWithHttpInfo($subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getPickupOptionsWithHttpInfo
     *
     * 
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getPickupOptionsWithHttpInfo($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/deliveryoptions/pickupoptions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','text/xml'));

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/pickupoptions'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getPickupOptionsForExistingConsignment
     *
     * 
     *
     * @param string $consignmentReference The reference of the consignment to retrieve pickup location options for (required)
     * @param string $deliveryDate An optional parameter that allows you to retrieve pickup locations for a specific delivery date only. (optional)
     * @param bool $guaranteedOnly A flag that allows you to specify that results returned should be for guaranteed services only (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getPickupOptionsForExistingConsignment($consignmentReference, $deliveryDate = null, $guaranteedOnly = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->getPickupOptionsForExistingConsignmentWithHttpInfo($consignmentReference, $deliveryDate, $guaranteedOnly, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation getPickupOptionsForExistingConsignmentWithHttpInfo
     *
     * 
     *
     * @param string $consignmentReference The reference of the consignment to retrieve pickup location options for (required)
     * @param string $deliveryDate An optional parameter that allows you to retrieve pickup locations for a specific delivery date only. (optional)
     * @param bool $guaranteedOnly A flag that allows you to specify that results returned should be for guaranteed services only (optional)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function getPickupOptionsForExistingConsignmentWithHttpInfo($consignmentReference, $deliveryDate = null, $guaranteedOnly = null, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'consignmentReference' is set
        if ($consignmentReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $consignmentReference when calling getPickupOptionsForExistingConsignment');
        }
        // parse inputs
        $resourcePath = "/deliveryoptions/pickupOptions/consignment/{consignmentReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($deliveryDate !== null) {
            $queryParams['deliveryDate'] = $this->apiClient->getSerializer()->toQueryValue($deliveryDate);
        }
        // query params
        if ($guaranteedOnly !== null) {
            $queryParams['guaranteedOnly'] = $this->apiClient->getSerializer()->toQueryValue($guaranteedOnly);
        }
        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($consignmentReference !== null) {
            $resourcePath = str_replace(
                "{" . "consignmentReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($consignmentReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/pickupOptions/consignment/{consignmentReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation heartbeat
     *
     * 
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function heartbeat($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->heartbeatWithHttpInfo($subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation heartbeatWithHttpInfo
     *
     * 
     *
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function heartbeatWithHttpInfo($subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // parse inputs
        $resourcePath = "/deliveryoptions/heartbeat";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/heartbeat'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reservePickupLocation
     *
     * 
     *
     * @param string $pickupOptionReference The reference of the location / option to reserve (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function reservePickupLocation($pickupOptionReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->reservePickupLocationWithHttpInfo($pickupOptionReference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation reservePickupLocationWithHttpInfo
     *
     * 
     *
     * @param string $pickupOptionReference The reference of the location / option to reserve (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function reservePickupLocationWithHttpInfo($pickupOptionReference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'pickupOptionReference' is set
        if ($pickupOptionReference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pickupOptionReference when calling reservePickupLocation');
        }
        // parse inputs
        $resourcePath = "/deliveryoptions/reserve/{pickupOptionReference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($pickupOptionReference !== null) {
            $resourcePath = str_replace(
                "{" . "pickupOptionReference" . "}",
                $this->apiClient->getSerializer()->toPathValue($pickupOptionReference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/reserve/{pickupOptionReference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation selectDeliveryOption
     *
     * 
     *
     * @param string $reference The reference of the delivery option or pickup option to select (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return void
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function selectDeliveryOption($reference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        list($response) = $this->selectDeliveryOptionWithHttpInfo($reference, $subscriptionKey, $ocpApimSubscriptionKey);
        return $response;
    }

    /**
     * Operation selectDeliveryOptionWithHttpInfo
     *
     * 
     *
     * @param string $reference The reference of the delivery option or pickup option to select (required)
     * @param string $subscriptionKey subscription key in url (optional)
     * @param string $ocpApimSubscriptionKey subscription key in header (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ChrisHemmings\ElectioClient\ApiException on non-2xx response
     */
    public function selectDeliveryOptionWithHttpInfo($reference, $subscriptionKey = null, $ocpApimSubscriptionKey = null)
    {
        // verify the required parameter 'reference' is set
        if ($reference === null) {
            throw new \InvalidArgumentException('Missing the required parameter $reference when calling selectDeliveryOption');
        }
        // parse inputs
        $resourcePath = "/deliveryoptions/select/{reference}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($subscriptionKey !== null) {
            $queryParams['subscription-key'] = $this->apiClient->getSerializer()->toQueryValue($subscriptionKey);
        }
        // header params
        if ($ocpApimSubscriptionKey !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $this->apiClient->getSerializer()->toHeaderValue($ocpApimSubscriptionKey);
        }
        // path params
        if ($reference !== null) {
            $resourcePath = str_replace(
                "{" . "reference" . "}",
                $this->apiClient->getSerializer()->toPathValue($reference),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deliveryoptions/select/{reference}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
